import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import skimage
from skimage import measure
import napari

from loguru import logger

logger.info('Import OK')

# define location parameters
input_folder = f'ImmunoEM-vesicle-detection/python_results/ImmunoEM-vesicle-detection_Analyzed/segmentation/'
output_folder = f'ImmunoEM-vesicle-detection/python_results/ImmunoEM-vesicle-detection_Analyzed/feature_validation/'

if not os.path.exists(output_folder):
    os.mkdir(output_folder)


def validate_features(image, image_name, features):
    """Spawn editable ROIs for individual features. After completing, all membranes should be labelled 1, clefts should be labelled 2 and vesicles should be labelled 3. User MUST ENSURE all features of the same type are separated by at least one pixel, and can therefore be treated as individual features for subsequent analyses.

    Parameters
    ----------
    image : array
        original image
    image_name : str
        name of image to be processed
    features : array
        current feature labels as generated by segmentation
    Returns
    -------
    array
        Manually annotates features where all membranes should be labelled 1, clefts should be labelled 2 and vesicles should be labelled 3.
    """

    with napari.gui_qt():
        # create the viewer and add the image
        viewer = napari.view_image(image, name='Raw image')
        # add the labels
        viewer.add_labels(features, name='Segmentation')

    return features


# ----------------Read in segmentation data----------------
# reading in all images + masks. If alter 'if '.DS' not in' to 'if 'x' in' if a specific image handle is preferable
array_stacks = {filename.replace('.npy', ''): np.load(f'{input_folder}{filename}') for filename in os.listdir(input_folder) if '.DS' not in filename}

# # Example napari visualisation to test matching mask array to image
# import napari
# image_test_name = '17'
# with napari.gui_qt():
#     viewer = napari.Viewer()
#     viewer.add_image(array_stacks[image_test_name][:, :, 0], name='raw_image')
#     viewer.add_labels(array_stacks[image_test_name][:, :, 1], name='features')

# ----------------enable manual validation of feature labels information----------------
# NOTE: all membranes should be labelled 1, clefts should be labelled 2 and vesicles should be labelled 3

for image_name, stack in array_stacks.items():
    image = stack[0, :, :]
    valid_features = validate_features(image, image_name=image_name, features=stack[1, :, :])
    membranes = np.where(valid_features == 1, valid_features, 0)
    clefts = np.where(valid_features == 2, valid_features, 0)
    vesicles = np.where(valid_features == 3, valid_features, 0)

    # Separate individual membranes
    membranes = measure.label(membranes)
    
    # Separate individual clefts
    clefts = measure.label(clefts)

    # Separate individual vesicles
    vesicles = measure.label(vesicles)
    
    # previews
    with napari.gui_qt():
        viewer = napari.Viewer()
        viewer.add_image(stack[0, :, :], name='raw_image')
        viewer.add_labels(vesicles, name='features')

    with napari.gui_qt():
        viewer = napari.Viewer()
        viewer.add_image(stack[0, :, :], name='raw_image')
        viewer.add_labels(clefts, name='features')

    with napari.gui_qt():
        viewer = napari.Viewer()
        viewer.add_image(stack[0, :, :], name='raw_image')
        viewer.add_labels(membranes, name='features')

    # save associated arrays
    np.save(f'{output_folder}{image_name}.npy', np.array([image, membranes, clefts, vesicles]))
    logger.info(f'Validation for {image_name} saved.')
